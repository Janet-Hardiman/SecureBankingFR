package com.company;
/*
.------..------.
|J.--. ||H.--. |
| :(): || :/\: |
| ()() || (__) |
| '--'J|| '--'H|
`------'`------'
Name: Janet Hardiman
Date: 07/10/2016
Project: FaceDetection"
*/
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.objdetect.CascadeClassifier;

import javax.swing.*;

public class FaceDetection extends javax.swing.JFrame {

    private JPanel facePanel;
    private JButton buttonCapture;
    private JButton buttonSave;
    private JButton buttonRetake;
    private JButton buttonCancel;
    private JButton trainImages;
    String suffix;
    private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");

    private DaemonThread webThread = null;
    Thread saveThread = null;
    int count = 0;
    VideoCapture webSource = null;
    Mat frame = new Mat();
    Mat Crop = new Mat();
    MatOfByte mem = new MatOfByte();
    CascadeClassifier faceDetector = new CascadeClassifier("haarcascade_frontalface_alt.xml");
    MatOfRect faceDetections = new MatOfRect();

    class DaemonThread implements Runnable {
        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    if (webSource.grab()) {
                        try {
                            webSource.retrieve(frame);
                            Graphics g = facePanel.getGraphics();
                            faceDetector.detectMultiScale(frame, faceDetections);
                            Rect rectCrop = null;
                            for (Rect rect : faceDetections.toArray()) {
                                // System.out.println("ttt");
                                Core.rectangle(frame, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                                        new Scalar(0, 255,0));
                                rectCrop = new Rect(rect.x, rect.y, rect.width, rect.height);
                            }
                            Crop = new Mat(frame,rectCrop);
                   //         Highgui.imwrite("cropimage_912.jpg",Crop);
                            Highgui.imencode(".bmp", frame, mem);
                            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
                            BufferedImage buff = (BufferedImage) im;
                            if (g.drawImage(buff, 0, 0, getWidth(), getHeight()-150 , 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                if (runnable == false) {
                                    System.out.println("Paused ..... ");
                                    this.wait();
                                }
                            }
                        } catch (Exception ex) {
                            System.out.println("Error webcam not ready");
                        }
                    }
                }
            }
        }
    }

    /**
     * Creates new form FaceDetectionA
     */
    public FaceDetection() {
        initComponents();
        System.out.println("haarcascade_frontalface_alt.xml");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("Since15")
    private void initComponents() {

        facePanel = new javax.swing.JPanel();
        buttonCapture = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonRetake = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        trainImages = new javax.swing.JButton();


        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        GroupLayout facePanelLayout = new GroupLayout(facePanel);
        facePanel.setLayout(facePanelLayout);
        facePanelLayout.setHorizontalGroup(
                facePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        facePanelLayout.setVerticalGroup(
                facePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 600, Short.MAX_VALUE) //600 value set the height of the webcam picture
        );


        buttonCapture.setText("Capture");
        buttonCapture.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                buttonCaptureActionPerformed(e);
            }
        });

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                buttonSaveActionPerformed(e);
            }
        });

        buttonRetake.setText("Retake");
        buttonRetake.addActionListener(new java.awt.event. ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                buttonRetakeActionPerformed(e);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                buttonCancelActionPerformed(e);
            }
        });

        trainImages.setText("Train Images");
        trainImages.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed (java.awt.event.ActionEvent e){
                trainImagesActionPerformed(e);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)  //(int min, int pref, int max)
                                .addComponent(facePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(buttonCapture)
                                .addGap(86, 86, 86)
                                .addComponent(buttonSave)
                                .addGap(86, 86, 86)
                                .addComponent(buttonRetake)
                                .addGap(86, 86, 86)
                                .addComponent(buttonCancel)
                                .addGap(86, 86, 86)
                                .addComponent(trainImages)
                                .addContainerGap(258, Short.MAX_VALUE))
        );
        //noinspection Since15
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(facePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonCapture)
                                        .addComponent(buttonSave)
                                        .addComponent(buttonRetake)
                                        .addComponent(buttonCancel)
                                        .addComponent(trainImages))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();

        webSource = new VideoCapture(0);    //video capture from default cam
        webThread = new DaemonThread();      //create object of threat class for the webcam
        Thread t = new Thread(webThread);
        t.setDaemon(true);
        webThread.runnable = true;
        t.start();                          //start thread
        buttonSave.setEnabled(false);       //disable buttons until required
        buttonRetake.setEnabled(false);

    }// </editor-fold>//GEN-END:initComponents

    private void buttonCaptureActionPerformed(java.awt.event.ActionEvent e) {
        webThread.runnable = false;          //stop thread
        buttonSave.setEnabled(true);
        buttonRetake.setEnabled(true);
        buttonCapture.setEnabled(false);
        String filename = "facialPhoto.png";
        Highgui.imwrite(filename, frame);

    }//end event_buttonCaptureActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent e) {
        webThread.runnable = false;         //stop thread
        webSource.release();                //stop capturing from cam
        saveThread = new Thread();          //thread for saving images
        saveThread.start();                 //start thread

        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String name = (String)JOptionPane.showInputDialog(facePanel, "Please enter your name: ", "Save File", JOptionPane.INFORMATION_MESSAGE );

        System.out.println(sdf.format(timestamp));
        suffix = sdf.format(timestamp);


        //adding name enter, timestamp and file format
        String imageSave = name + suffix + ".jpg";
        String imageCropSave = name + suffix + ".png";
        System.out.println(imageSave);
        if((name != null) && (name.length() > 0)){
            //suffix++;
            Highgui.imwrite(imageSave, frame);
            Highgui.imwrite(imageCropSave, Crop);
            savePhoto photo = new savePhoto(imageCropSave, "trainingImages");
            photo.start();
            buttonSave.setEnabled(false);       //activate start button
        }
        else
            JOptionPane.showMessageDialog(facePanel, "Error no file created, name must be entered", "Inane Error", JOptionPane.ERROR_MESSAGE);

    }//end event_buttonSaveActionPerformed

    private void buttonRetakeActionPerformed(java.awt.event.ActionEvent e) {
        webSource = new VideoCapture(0);    //video capture from default cam
        webThread = new DaemonThread();      //create object of threat class
        Thread t = new Thread(webThread);
        t.setDaemon(true);
        webThread.runnable = true;
        t.start();
        buttonCapture.setEnabled(true);
        buttonRetake.setEnabled(false);

    }//end event_buttonRetakeActionPerformed


    private void buttonCancelActionPerformed(java.awt.event.ActionEvent e) {
        webSource.release();                //stop capturing from cam
        new Login().setVisible(true);
        dispose();

    }//end event_buttonCancelActionPerformed

    private void trainImagesActionPerformed(ActionEvent e) {

        int numEFs = 0;

        long startTime = System.currentTimeMillis();
        BuildEigenFaces.build(numEFs);
        System.out.println("Total time taken: " +
                (System.currentTimeMillis() - startTime) + " ms");

        new Login().setVisible(true);
        dispose();

    }//end event_trainImageActionPerformed
}



