package com.company;
/*
.------..------.
|J.--. ||H.--. |
| :(): || :/\: |
| ()() || (__) |
| '--'J|| '--'H|
`------'`------'
Name: Janet Hardiman
Date: 07/10/2016
Project: Webcam"
*/

import org.opencv.core.*;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.objdetect.CascadeClassifier;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URI;


public class Webcam extends javax.swing.JFrame {

    private JPanel facePanel2;
    private JButton faceRecogButton;
    private JButton cancelButton;

    private Webcam.DaemonThread webCamThread = null;
    VideoCapture webSource = null;
    Mat frame = new Mat();
    Mat Crop = new Mat();
    MatOfByte mem = new MatOfByte();
    CascadeClassifier faceDetector = new CascadeClassifier("haarcascade_frontalface_alt.xml");
    MatOfRect faceDetections = new MatOfRect();

    class DaemonThread implements Runnable {
        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    if (webSource.grab()) {
                        try {
                            webSource.retrieve(frame);
                            Graphics g = facePanel2.getGraphics();
                            faceDetector.detectMultiScale(frame, faceDetections);
                            Rect rectCrop = null;
                            for (Rect rect : faceDetections.toArray()) {
                                Core.rectangle(frame, new org.opencv.core.Point(rect.x, rect.y), new org.opencv.core.Point(rect.x + rect.width, rect.y + rect.height),
                                        new Scalar(0, 255,0));
                                rectCrop = new Rect(rect.x, rect.y, rect.width, rect.height);
                            }
                            Crop = new Mat(frame,rectCrop);

                            Highgui.imencode(".bmp", frame, mem);
                            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
                            BufferedImage buff = (BufferedImage) im;
                            if (g.drawImage(buff, 0, 0, getWidth(), getHeight()-150 , 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                if (runnable == false) {
                                    System.out.println("Paused ..... ");
                                    this.wait();
                                }
                            }

                    } catch (Exception ex) {
                            System.out.println("Error webcam not ready");
                        }
                    }

                }
            }
        }
    }

    private String checkPhoto(String[] args)
    {
        if ((args.length < 1) || (args.length > 2)) {
            System.out.println("Usage: java Webcam imagePngFnm [numberOfEigenfaces]");
            return "Error";
        }

        int numEFs = 0;
        if (args.length == 2) {
            try {
                numEFs = Integer.parseInt(args[1]);
            } catch (Exception e) {
                System.out.println("Number argument, " + args[1] + " must be an integer");
            }
        }

        long startTime = System.currentTimeMillis();

        FaceRecognition fr = new FaceRecognition(numEFs);
        MatchResult result = fr.match(args[0]);

        if (result == null)
            System.out.println("No match found");
        else {
            System.out.println();
            System.out.print("Matches image in " + result.getMatchFileName());
            System.out.printf("; distance = %.4f\n", result.getMatchDistance());
            System.out.println("Matched name: " + result.getName());
        }
        System.out.println("Total time taken: " + (System.currentTimeMillis() - startTime) + " ms\n");

        String name = result.getName();
        System.out.println("This is the name: " + name);
        return name;
    }//end of checkPhoto

    public Webcam()
    {
        initComponents();
        System.out.println("haarcascade_frontalface_alt.xml");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("Since15")
    private void initComponents() {
        facePanel2 = new javax.swing.JPanel();
        faceRecogButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();


        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


        GroupLayout facePanel2Layout = new GroupLayout(facePanel2);
        facePanel2.setLayout(facePanel2Layout);
        facePanel2Layout.setHorizontalGroup(
                facePanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        facePanel2Layout.setVerticalGroup(
                facePanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 600, Short.MAX_VALUE) //600 value set the height of the webcam picture
        );

        faceRecogButton.setText("Face Recognise");
        faceRecogButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                try {
                    faceRecogButtonActionPerformed(e);
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                cancelButtonActionPerformed(e);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                               // .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGap(20, 20, 20)  //(int min, int pref, int max)
                                .addComponent(facePanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(100,100,100)
                                .addComponent(faceRecogButton)
                                .addGap(100,100,100)
                                .addComponent(cancelButton)
                                .addGap(100,100,100)
                                .addContainerGap(258, Short.MAX_VALUE))

        );
        //noinspection Since15
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(facePanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addGap(20,20,20)
                                        .addComponent(faceRecogButton)
                                        .addComponent(cancelButton))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();

        webSource = new VideoCapture(0);            //video capture from default cam
        webCamThread = new Webcam.DaemonThread();      //create object of threat class for the webcam
        Thread t = new Thread(webCamThread);
        t.setDaemon(true);
        webCamThread.runnable = true;
        t.start();                          //start thread

    }// </editor-fold>//GEN-END:initComponents

    private void faceRecogButtonActionPerformed(java.awt.event.ActionEvent e) throws IOException {
        webCamThread.runnable = false;          //stop thread

        String tempPhoto = "photo.png";
        Highgui.imwrite(tempPhoto, Crop);
        savePhoto eigenPhoto = new savePhoto(tempPhoto, "tempImages");
        eigenPhoto.start();

        String name = checkPhoto(new String[]{"tempImages/photo.png"});

        Object[] options = {"Enter, please",
                "Cancel"};
        int input = JOptionPane.showOptionDialog(facePanel2,
                "Hello " + name,
                "Face Recognised Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,     //do not use a custom Icon
                options,  //the titles of buttons
                options[0]); //default button title

        if(input == JOptionPane.YES_OPTION)
        {
            webSource.release();                //stop capturing from cam
            java.awt.Desktop.getDesktop().browse(URI.create("http://localhost:8080/"));
            dispose();
        }

        else {
            webSource = new VideoCapture(0);    //video capture from default cam
            webCamThread = new DaemonThread();      //create object of threat class
            Thread t = new Thread(webCamThread);
            t.setDaemon(true);
            webCamThread.runnable = true;
            t.start();
        }


    }//end event_faceRecogButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent e) {
        webSource.release();                //stop capturing from cam
        new Login().setVisible(true);
        dispose();

    }//end event_cancelButtonActionPerformed

}  // end of Webcam class



